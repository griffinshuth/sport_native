1、操作系统是Ubuntu 12.04。
 
2、需要安装Google的NDK工具，因为在编译时使用了NDK提供的编译器。我的NDK的安装目录放在/home/shallon/android-ndk-r8d。另外，需要安装android的SDK，提供ADB等调试的工具
 
3、下载获取X264的源码。
git clone git://git.videolan.org/x264.git
 
4、使用配置编译的脚本
export ARM_ROOT=/home/shallon/android-ndk-r8d
export ARM_INC=$ARM_ROOT/platforms/android-14/arch-arm/usr/include/
export ARM_LIB=$ARM_ROOT/platforms/android-14/arch-arm/usr/lib/
export ARM_TOOL=$ARM_ROOT/toolchains/arm-linux-androideabi-4.4.3/prebuilt/linux-x86
export ARM_LIBO=$ARM_TOOL/lib/gcc/arm-linux-androideabi/4.4.3
export PATH=$ARM_TOOL/bin:$PATH
export ARM_PRE=arm-linux-androideabi
 
 
./configure --disable-gpac --enable-pic --enable-strip --extra-cflags=" -I$ARM_INC -fPIC -DANDROID -fpic -mthumb-interwork -ffunction-sections -funwind-tables -fstack-protector -fno-short-enums -march=armv7-a -mtune=cortex-a9 -mfloat-abi=softfp -mfpu=neon -D__ARM_ARCH_7__ -D__ARM_ARCH_7A__  -Wno-psabi -msoft-float -mthumb -Os -fomit-frame-pointer -fno-strict-aliasing -finline-limit=64 -DANDROID  -Wa,--noexecstack -MMD -MP " --extra-ldflags="-nostdlib -Bdynamic -Wl,--no-undefined -Wl,-z,noexecstack  -Wl,-z,nocopyreloc -Wl,-soname,/system/lib/libz.so -Wl,-rpath-link=$ARM_LIB,-dynamic-linker=/system/bin/linker -L$ARM_LIB -nostdlib $ARM_LIB/crtbegin_dynamic.o $ARM_LIB/crtend_android.o -lc -lm -ldl -lgcc" --cross-prefix=${ARM_PRE}- --host=arm-linux --enable-static --prefix=/home/shallon/x264/build
 
配置关键点1：指定使用的交叉编译的编译器、链接的头文件及类库所在
配置关键点2：-march=armv7-a -mtune=cortex-a9 -mfloat-abi=softfp -mfpu=neon -D__ARM_ARCH_7__ -D__ARM_ARCH_7A__ ，此处，针对armv7-a的CPU打开了NEON的优化运行指令。
配置关键点3：去掉--disable-asm选项。该选项的意思就是禁止neon的指令。
配置关键点4：添加--enable-static选项，生成静态链接的库供程序开发使用。
 
5、配置运行的环境
export ARM_LINUX_ANDROIDEABI_GCC=/home/shallon/android-ndk-r8d/toolchains/arm-linux-androideabi-4.4.3/prebuilt/linux-x86/bin
export PATH=$ARM_LINUX_ANDROIDEABI_GCC:$PATH
 
6、编译
直接运行 :make
在当前目录生成x264的执行文件，以及链接的.a文件
查看x264文件的类型看看交叉编译是否成功。
shallon@shallon-Joybook-R48:~/x264$ file x264
x264: ELF 32-bit LSB executable, ARM, version 1 (SYSV), dynamically linked (uses shared libs), stripped
 